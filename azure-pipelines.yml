# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger: # when to trigger a build
  batch: true # means that if there are more changes when build is running, they will be waited for instead of starting a parallel build
  branches:
    include:
      - master
      - develop
pr:
  branches:
    include:
    - master
    - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  linx64: 'linux-x64'

steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '2.2.203'
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SmartHub-SonarCloud'
      organization: 'smarthub-io'
      scannerMode: 'MSBuild'
      projectKey: 'smarthub-io'
      projectName: 'SmartHub'

  - task: UseDotNet@2
    displayName: "Use .NET Core sdk"
    inputs:
        packageType: sdk
        version: 3.1.301
        installationPath: $(Agent.ToolsDirectory)/dotnet

  
###### Build #####
  - task: DotNetCoreCLI@2
    displayName: "Build solution"
    inputs:
        command: "build"
        projects: "$(solution)"
        arguments: '--configuration "$(buildConfiguration)"'

  - task: NodeTool@0 
  - script: ls

  - script: npm --prefix SmartHub/SmartHub.Ui install
  
  - script: npm --prefix SmartHub/SmartHub.Ui run build

###### Test #####
  - task: DotNetCoreCLI@2
    displayName: "Test"
    inputs:
        command: test
        projects: "$(solution)"
        arguments: '"-p:CollectCoverage=true" "-p:CoverletOutputFormat=cobertura"'
        nobuild: true
  # - task: CmdLine@2
  #   displayName: Merge code-coverage files
  #   inputs:
  #       script: |
  #           dotnet tool install -g dotnet-reportgenerator-globaltool
  #           reportgenerator "-reports:./test/**/coverage.cobertura.xml" "-reporttypes:Cobertura" "-targetdir:./coverreport"
  - task: PublishCodeCoverageResults@1
    displayName: "Generate code-coverage HTML report"
    inputs:
        codeCoverageTool: "Cobertura"
        summaryFileLocation: "./coverreport/Cobertura.xml"
        failIfCoverageEmpty: false

###### Sonar publish #####
  - task: SonarCloudAnalyze@1
    displayName: Sonar Analyze
  - task: SonarCloudPublish@1
    displayName: Sonar Publish
    inputs:
      pollingTimeoutSec: '200'


###### Publish and upload Artifact #####
  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: 'publish'
      publishWebProjects: true
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: true

  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
      artifactName: 'SmartHub_$(imageName)'
